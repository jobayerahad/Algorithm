package algorithm;

import java.awt.print.Book;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author jobay
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    DefaultTableModel model ;
    public App() {
        initComponents();
        StartPage.CenteredFrame(this);
        model = new DefaultTableModel();
        tableInfo.setModel(model);
        tableInfo.setVisible(false);
        showTable.setVisible(false);
        tableLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button = new javax.swing.JButton();
        input = new javax.swing.JTextField();
        output = new javax.swing.JLabel();
        lvlName = new javax.swing.JLabel();
        lvlInfo = new javax.swing.JLabel();
        sortingAlgorithmList = new javax.swing.JComboBox<>();
        lvlSorting = new javax.swing.JLabel();
        timeTaken = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableInfo = new javax.swing.JTable();
        showTable = new javax.swing.JButton();
        tableLabel = new javax.swing.JLabel();
        startPage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        button.setText("Sort");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });

        input.setToolTipText("");
        input.setSelectionColor(new java.awt.Color(51, 204, 255));

        lvlName.setText("Enter numbers : ");

        lvlInfo.setText("(Separate numbers with just a space)");

        sortingAlgorithmList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Select any --", "Selection Sort", "Bubble Sort", "Insertion Sort", "Merge Sort", "Quick Sort" }));

        lvlSorting.setText("Select Sorting Algorithm :");

        tableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableInfo);

        showTable.setText("Show");
        showTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTableActionPerformed(evt);
            }
        });

        tableLabel.setText("Click \"Show\" to See Other Algorithm's Time Taken for Your Numbers");

        startPage.setText("Back to Start Page");
        startPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(output, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lvlSorting)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(startPage)
                                        .addComponent(lvlName)))
                                .addGap(82, 82, 82)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lvlInfo)
                                            .addComponent(button)
                                            .addComponent(sortingAlgorithmList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18))
                                    .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)))
                            .addComponent(timeTaken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tableLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(showTable))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lvlName))
                .addGap(2, 2, 2)
                .addComponent(lvlInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortingAlgorithmList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lvlSorting))
                .addGap(23, 23, 23)
                .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(timeTaken, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showTable)
                    .addComponent(tableLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String string;
    InsertionSorting iSort;
    SelectionSorting sSort;
    QuickSorting qSort;
    MergeSorting mSort;
    BubbleSorting bSort;
    int algoNum;
    String selectionTime, bubbleTime,insertionTime, mergeTime, quickTime;
    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        if (input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter numbers separated with space", "Message", JOptionPane.WARNING_MESSAGE);
            input.requestFocus();
        } else if (sortingAlgorithmList.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please select any algorithm", "Message", JOptionPane.INFORMATION_MESSAGE);
            sortingAlgorithmList.requestFocus();
        } else {
            tableInfo.setVisible(true);
            showTable.setVisible(true);
            tableLabel.setVisible(true);
            
            string = input.getText();
            algoNum = sortingAlgorithmList.getSelectedIndex();
            String strarray[] =string.split(" ") ;
            int[] integers = new int[strarray.length]; 
            for (int i = 0; i < integers.length; i++){
                integers[i] = Integer.parseInt(strarray[i]); 
            }
            String value = "";
            
            if(algoNum == 1) {
                long startTime = System.nanoTime();
                sSort.doSelectionSort(integers);
                long stopTime = System.nanoTime();
                selectionTime = String.valueOf((stopTime-startTime)/1000);
                timeTaken.setText("Time taken : "+selectionTime+ " microseconds");
                value = "Selection Sorting : ";
            } else if (algoNum == 2) {
                long startTime = System.nanoTime();
                bSort.bubbleSort(integers);
                long stopTime = System.nanoTime();
                bubbleTime = String.valueOf((stopTime-startTime)/1000);
                timeTaken.setText("Time taken : "+bubbleTime+ " microseconds");
                value = "Bubble Sorting : ";
            } else if (algoNum == 3) {
                long startTime = System.nanoTime();
                iSort.insertionSort(integers);
                long stopTime = System.nanoTime();
                insertionTime = String.valueOf((stopTime-startTime)/1000);
                timeTaken.setText("Time taken : "+insertionTime+ " microseconds");
                value = "Inserion Sorting : ";
            } else if (algoNum == 4) {
                long startTime = System.nanoTime();
                mSort.mergeSort(integers);
                long stopTime = System.nanoTime();
                mergeTime = String.valueOf((stopTime-startTime)/1000);
                timeTaken.setText("Time taken : "+mergeTime+ " microseconds");
                value = "Merge Sorting : ";
            } else if (algoNum == 5) {
                long startTime = System.nanoTime();
                qSort.quickSort(integers);
                long stopTime = System.nanoTime();
                quickTime = String.valueOf((stopTime-startTime)/1000);
                timeTaken.setText("Time taken : "+quickTime+ " microseconds");
                value = "Quick Sorting : ";
            }
            
            for (int i: integers) {
                value+= i+", ";
            }
            output.setText(value);
        }
    }//GEN-LAST:event_buttonActionPerformed

    private void showTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTableActionPerformed
        if (input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter numbers separated with space", "Message", JOptionPane.WARNING_MESSAGE);
            input.requestFocus();
        } else if (sortingAlgorithmList.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please select any algorithm", "Message", JOptionPane.INFORMATION_MESSAGE);
            sortingAlgorithmList.requestFocus();
        } else if (output.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please Sort The Array First", "Notice", JOptionPane.INFORMATION_MESSAGE);
            button.requestFocus();
        } else {
            string = input.getText();
            algoNum = sortingAlgorithmList.getSelectedIndex();
            String strarray[] = string.split(" ") ;
            int[] integers = new int[strarray.length]; 
            for (int i = 0; i < integers.length; i++){
                integers[i] = Integer.parseInt(strarray[i]); 
            }
            
            long startTime = System.nanoTime();
            sSort.doSelectionSort(integers);
            long stopTime = System.nanoTime();
            selectionTime = String.valueOf((stopTime-startTime)/1000);
            
            startTime = System.nanoTime();
            bSort.bubbleSort(integers);
            stopTime = System.nanoTime();
            bubbleTime = String.valueOf((stopTime-startTime)/1000);
            
            startTime = System.nanoTime();
            iSort.insertionSort(integers);
            stopTime = System.nanoTime();
            insertionTime = String.valueOf((stopTime-startTime)/1000);
            
            startTime = System.nanoTime();
            mSort.mergeSort(integers);
            stopTime = System.nanoTime();
            mergeTime = String.valueOf((stopTime-startTime)/1000);
            
            startTime = System.nanoTime();
            qSort.quickSort(integers);
            stopTime = System.nanoTime();
            quickTime = String.valueOf((stopTime-startTime)/1000);
            
            HashMap<String, String> hm = new HashMap<String, String>();
            hm.put("Selection Sort", selectionTime);
            hm.put("Bubble Sort", bubbleTime);
            hm.put("Insertion Sort", insertionTime);
            hm.put("Merge Sort", mergeTime);
            hm.put("Quick Sort", quickTime);
            
            int[] tableValues = new int[4] ;
            //String[] columnValues = {"Selection Sort", "Bubble Sort", "Insertion Sort", "Merge Sort", "Quick Sort"};
            int cols = tableInfo.getColumnCount();
            if (cols <= 3) {
                int i = 0;
                for(Map.Entry<String, String> entry:hm.entrySet()) {
                    if(entry.getKey() != sortingAlgorithmList.getSelectedItem().toString()) {
                        model.addColumn(entry.getKey());
                        tableValues[i] = Integer.parseInt(entry.getValue());
                        i++;
                    }
                }
                model.addRow(new Object[] {tableValues[0], tableValues[1], tableValues[2], tableValues[3]});
            }
        }
    }//GEN-LAST:event_showTableActionPerformed

    private void startPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPageActionPerformed
        StartPage sp = new StartPage();
        sp.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_startPageActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button;
    private javax.swing.JTextField input;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lvlInfo;
    private javax.swing.JLabel lvlName;
    private javax.swing.JLabel lvlSorting;
    private javax.swing.JLabel output;
    private javax.swing.JButton showTable;
    private javax.swing.JComboBox<String> sortingAlgorithmList;
    private javax.swing.JButton startPage;
    private javax.swing.JTable tableInfo;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JLabel timeTaken;
    // End of variables declaration//GEN-END:variables
}
